export default WebGL2RenderingContext

declare global {
	const ACTIVE_ATTRIBUTES: GLenum;
	const ACTIVE_TEXTURE: GLenum;
	const ACTIVE_UNIFORMS: GLenum;
	const ACTIVE_UNIFORM_BLOCKS: GLenum;
	const ALIASED_LINE_WIDTH_RANGE: GLenum;
	const ALIASED_POINT_SIZE_RANGE: GLenum;
	const ALPHA: GLenum;
	const ALPHA_BITS: GLenum;
	const ALREADY_SIGNALED: GLenum;
	const ALWAYS: GLenum;
	const ANY_SAMPLES_PASSED: GLenum;
	const ANY_SAMPLES_PASSED_CONSERVATIVE: GLenum;
	const ARRAY_BUFFER: GLenum;
	const ARRAY_BUFFER_BINDING: GLenum;
	const ATTACHED_SHADERS: GLenum;
	const BACK: GLenum;
	const BLEND: GLenum;
	const BLEND_COLOR: GLenum;
	const BLEND_DST_ALPHA: GLenum;
	const BLEND_DST_RGB: GLenum;
	const BLEND_EQUATION: GLenum;
	const BLEND_EQUATION_ALPHA: GLenum;
	const BLEND_EQUATION_RGB: GLenum;
	const BLEND_SRC_ALPHA: GLenum;
	const BLEND_SRC_RGB: GLenum;
	const BLUE_BITS: GLenum;
	const BOOL: GLenum;
	const BOOL_VEC2: GLenum;
	const BOOL_VEC3: GLenum;
	const BOOL_VEC4: GLenum;
	const BROWSER_DEFAULT_WEBGL: GLenum;
	const BUFFER_SIZE: GLenum;
	const BUFFER_USAGE: GLenum;
	const BYTE: GLenum;
	const CCW: GLenum;
	const CLAMP_TO_EDGE: GLenum;
	const COLOR: GLenum;
	const COLOR_ATTACHMENT0: GLenum;
	const COLOR_ATTACHMENT10: GLenum;
	const COLOR_ATTACHMENT11: GLenum;
	const COLOR_ATTACHMENT12: GLenum;
	const COLOR_ATTACHMENT13: GLenum;
	const COLOR_ATTACHMENT14: GLenum;
	const COLOR_ATTACHMENT15: GLenum;
	const COLOR_ATTACHMENT1: GLenum;
	const COLOR_ATTACHMENT2: GLenum;
	const COLOR_ATTACHMENT3: GLenum;
	const COLOR_ATTACHMENT4: GLenum;
	const COLOR_ATTACHMENT5: GLenum;
	const COLOR_ATTACHMENT6: GLenum;
	const COLOR_ATTACHMENT7: GLenum;
	const COLOR_ATTACHMENT8: GLenum;
	const COLOR_ATTACHMENT9: GLenum;
	const COLOR_BUFFER_BIT: GLenum;
	const COLOR_CLEAR_VALUE: GLenum;
	const COLOR_WRITEMASK: GLenum;
	const COMPARE_REF_TO_TEXTURE: GLenum;
	const COMPILE_STATUS: GLenum;
	const COMPRESSED_TEXTURE_FORMATS: GLenum;
	const CONDITION_SATISFIED: GLenum;
	const CONSTANT_ALPHA: GLenum;
	const CONSTANT_COLOR: GLenum;
	const CONTEXT_LOST_WEBGL: GLenum;
	const COPY_READ_BUFFER: GLenum;
	const COPY_READ_BUFFER_BINDING: GLenum;
	const COPY_WRITE_BUFFER: GLenum;
	const COPY_WRITE_BUFFER_BINDING: GLenum;
	const CULL_FACE: GLenum;
	const CULL_FACE_MODE: GLenum;
	const CURRENT_PROGRAM: GLenum;
	const CURRENT_QUERY: GLenum;
	const CURRENT_VERTEX_ATTRIB: GLenum;
	const CW: GLenum;
	const DECR: GLenum;
	const DECR_WRAP: GLenum;
	const DELETE_STATUS: GLenum;
	const DEPTH24_STENCIL8: GLenum;
	const DEPTH32F_STENCIL8: GLenum;
	const DEPTH: GLenum;
	const DEPTH_ATTACHMENT: GLenum;
	const DEPTH_BITS: GLenum;
	const DEPTH_BUFFER_BIT: GLenum;
	const DEPTH_CLEAR_VALUE: GLenum;
	const DEPTH_COMPONENT16: GLenum;
	const DEPTH_COMPONENT24: GLenum;
	const DEPTH_COMPONENT32F: GLenum;
	const DEPTH_COMPONENT: GLenum;
	const DEPTH_FUNC: GLenum;
	const DEPTH_RANGE: GLenum;
	const DEPTH_STENCIL: GLenum;
	const DEPTH_STENCIL_ATTACHMENT: GLenum;
	const DEPTH_TEST: GLenum;
	const DEPTH_WRITEMASK: GLenum;
	const DITHER: GLenum;
	const DONT_CARE: GLenum;
	const DRAW_BUFFER0: GLenum;
	const DRAW_BUFFER10: GLenum;
	const DRAW_BUFFER11: GLenum;
	const DRAW_BUFFER12: GLenum;
	const DRAW_BUFFER13: GLenum;
	const DRAW_BUFFER14: GLenum;
	const DRAW_BUFFER15: GLenum;
	const DRAW_BUFFER1: GLenum;
	const DRAW_BUFFER2: GLenum;
	const DRAW_BUFFER3: GLenum;
	const DRAW_BUFFER4: GLenum;
	const DRAW_BUFFER5: GLenum;
	const DRAW_BUFFER6: GLenum;
	const DRAW_BUFFER7: GLenum;
	const DRAW_BUFFER8: GLenum;
	const DRAW_BUFFER9: GLenum;
	const DRAW_FRAMEBUFFER: GLenum;
	const DRAW_FRAMEBUFFER_BINDING: GLenum;
	const DST_ALPHA: GLenum;
	const DST_COLOR: GLenum;
	const DYNAMIC_COPY: GLenum;
	const DYNAMIC_DRAW: GLenum;
	const DYNAMIC_READ: GLenum;
	const ELEMENT_ARRAY_BUFFER: GLenum;
	const ELEMENT_ARRAY_BUFFER_BINDING: GLenum;
	const EQUAL: GLenum;
	const FASTEST: GLenum;
	const FLOAT: GLenum;
	const FLOAT_32_UNSIGNED_INT_24_8_REV: GLenum;
	const FLOAT_MAT2: GLenum;
	const FLOAT_MAT2x3: GLenum;
	const FLOAT_MAT2x4: GLenum;
	const FLOAT_MAT3: GLenum;
	const FLOAT_MAT3x2: GLenum;
	const FLOAT_MAT3x4: GLenum;
	const FLOAT_MAT4: GLenum;
	const FLOAT_MAT4x2: GLenum;
	const FLOAT_MAT4x3: GLenum;
	const FLOAT_VEC2: GLenum;
	const FLOAT_VEC3: GLenum;
	const FLOAT_VEC4: GLenum;
	const FRAGMENT_SHADER: GLenum;
	const FRAGMENT_SHADER_DERIVATIVE_HINT: GLenum;
	const FRAMEBUFFER: GLenum;
	const FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_BLUE_SIZE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING: GLenum;
	const FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_GREEN_SIZE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: GLenum;
	const FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_RED_SIZE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: GLenum;
	const FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER: GLenum;
	const FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: GLenum;
	const FRAMEBUFFER_BINDING: GLenum;
	const FRAMEBUFFER_COMPLETE: GLenum;
	const FRAMEBUFFER_DEFAULT: GLenum;
	const FRAMEBUFFER_INCOMPLETE_ATTACHMENT: GLenum;
	const FRAMEBUFFER_INCOMPLETE_DIMENSIONS: GLenum;
	const FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: GLenum;
	const FRAMEBUFFER_INCOMPLETE_MULTISAMPLE: GLenum;
	const FRAMEBUFFER_UNSUPPORTED: GLenum;
	const FRONT: GLenum;
	const FRONT_AND_BACK: GLenum;
	const FRONT_FACE: GLenum;
	const FUNC_ADD: GLenum;
	const FUNC_REVERSE_SUBTRACT: GLenum;
	const FUNC_SUBTRACT: GLenum;
	const GENERATE_MIPMAP_HINT: GLenum;
	const GEQUAL: GLenum;
	const GREATER: GLenum;
	const GREEN_BITS: GLenum;
	const HALF_FLOAT: GLenum;
	const HIGH_FLOAT: GLenum;
	const HIGH_INT: GLenum;
	const IMPLEMENTATION_COLOR_READ_FORMAT: GLenum;
	const IMPLEMENTATION_COLOR_READ_TYPE: GLenum;
	const INCR: GLenum;
	const INCR_WRAP: GLenum;
	const INT: GLenum;
	const INTERLEAVED_ATTRIBS: GLenum;
	const INT_2_10_10_10_REV: GLenum;
	const INT_SAMPLER_2D: GLenum;
	const INT_SAMPLER_2D_ARRAY: GLenum;
	const INT_SAMPLER_3D: GLenum;
	const INT_SAMPLER_CUBE: GLenum;
	const INT_VEC2: GLenum;
	const INT_VEC3: GLenum;
	const INT_VEC4: GLenum;
	const INVALID_ENUM: GLenum;
	const INVALID_FRAMEBUFFER_OPERATION: GLenum;
	const INVALID_INDEX: GLenum;
	const INVALID_OPERATION: GLenum;
	const INVALID_VALUE: GLenum;
	const INVERT: GLenum;
	const KEEP: GLenum;
	const LEQUAL: GLenum;
	const LESS: GLenum;
	const LINEAR: GLenum;
	const LINEAR_MIPMAP_LINEAR: GLenum;
	const LINEAR_MIPMAP_NEAREST: GLenum;
	const LINES: GLenum;
	const LINE_LOOP: GLenum;
	const LINE_STRIP: GLenum;
	const LINE_WIDTH: GLenum;
	const LINK_STATUS: GLenum;
	const LOW_FLOAT: GLenum;
	const LOW_INT: GLenum;
	const LUMINANCE: GLenum;
	const LUMINANCE_ALPHA: GLenum;
	const MAX: GLenum;
	const MAX_3D_TEXTURE_SIZE: GLenum;
	const MAX_ARRAY_TEXTURE_LAYERS: GLenum;
	const MAX_CLIENT_WAIT_TIMEOUT_WEBGL: GLenum;
	const MAX_COLOR_ATTACHMENTS: GLenum;
	const MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS: GLenum;
	const MAX_COMBINED_TEXTURE_IMAGE_UNITS: GLenum;
	const MAX_COMBINED_UNIFORM_BLOCKS: GLenum;
	const MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS: GLenum;
	const MAX_CUBE_MAP_TEXTURE_SIZE: GLenum;
	const MAX_DRAW_BUFFERS: GLenum;
	const MAX_ELEMENTS_INDICES: GLenum;
	const MAX_ELEMENTS_VERTICES: GLenum;
	const MAX_ELEMENT_INDEX: GLenum;
	const MAX_FRAGMENT_INPUT_COMPONENTS: GLenum;
	const MAX_FRAGMENT_UNIFORM_BLOCKS: GLenum;
	const MAX_FRAGMENT_UNIFORM_COMPONENTS: GLenum;
	const MAX_FRAGMENT_UNIFORM_VECTORS: GLenum;
	const MAX_PROGRAM_TEXEL_OFFSET: GLenum;
	const MAX_RENDERBUFFER_SIZE: GLenum;
	const MAX_SAMPLES: GLenum;
	const MAX_SERVER_WAIT_TIMEOUT: GLenum;
	const MAX_TEXTURE_IMAGE_UNITS: GLenum;
	const MAX_TEXTURE_LOD_BIAS: GLenum;
	const MAX_TEXTURE_SIZE: GLenum;
	const MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS: GLenum;
	const MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS: GLenum;
	const MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS: GLenum;
	const MAX_UNIFORM_BLOCK_SIZE: GLenum;
	const MAX_UNIFORM_BUFFER_BINDINGS: GLenum;
	const MAX_VARYING_COMPONENTS: GLenum;
	const MAX_VARYING_VECTORS: GLenum;
	const MAX_VERTEX_ATTRIBS: GLenum;
	const MAX_VERTEX_OUTPUT_COMPONENTS: GLenum;
	const MAX_VERTEX_TEXTURE_IMAGE_UNITS: GLenum;
	const MAX_VERTEX_UNIFORM_BLOCKS: GLenum;
	const MAX_VERTEX_UNIFORM_COMPONENTS: GLenum;
	const MAX_VERTEX_UNIFORM_VECTORS: GLenum;
	const MAX_VIEWPORT_DIMS: GLenum;
	const MEDIUM_FLOAT: GLenum;
	const MEDIUM_INT: GLenum;
	const MIN: GLenum;
	const MIN_PROGRAM_TEXEL_OFFSET: GLenum;
	const MIRRORED_REPEAT: GLenum;
	const NEAREST: GLenum;
	const NEAREST_MIPMAP_LINEAR: GLenum;
	const NEAREST_MIPMAP_NEAREST: GLenum;
	const NEVER: GLenum;
	const NICEST: GLenum;
	const NONE: GLenum;
	const NOTEQUAL: GLenum;
	const NO_ERROR: GLenum;
	const OBJECT_TYPE: GLenum;
	const ONE: GLenum;
	const ONE_MINUS_CONSTANT_ALPHA: GLenum;
	const ONE_MINUS_CONSTANT_COLOR: GLenum;
	const ONE_MINUS_DST_ALPHA: GLenum;
	const ONE_MINUS_DST_COLOR: GLenum;
	const ONE_MINUS_SRC_ALPHA: GLenum;
	const ONE_MINUS_SRC_COLOR: GLenum;
	const OUT_OF_MEMORY: GLenum;
	const PACK_ALIGNMENT: GLenum;
	const PACK_ROW_LENGTH: GLenum;
	const PACK_SKIP_PIXELS: GLenum;
	const PACK_SKIP_ROWS: GLenum;
	const PIXEL_PACK_BUFFER: GLenum;
	const PIXEL_PACK_BUFFER_BINDING: GLenum;
	const PIXEL_UNPACK_BUFFER: GLenum;
	const PIXEL_UNPACK_BUFFER_BINDING: GLenum;
	const POINTS: GLenum;
	const POLYGON_OFFSET_FACTOR: GLenum;
	const POLYGON_OFFSET_FILL: GLenum;
	const POLYGON_OFFSET_UNITS: GLenum;
	const QUERY_RESULT: GLenum;
	const QUERY_RESULT_AVAILABLE: GLenum;
	const R11F_G11F_B10F: GLenum;
	const R16F: GLenum;
	const R16I: GLenum;
	const R16UI: GLenum;
	const R32F: GLenum;
	const R32I: GLenum;
	const R32UI: GLenum;
	const R8: GLenum;
	const R8I: GLenum;
	const R8UI: GLenum;
	const R8_SNORM: GLenum;
	const RASTERIZER_DISCARD: GLenum;
	const READ_BUFFER: GLenum;
	const READ_FRAMEBUFFER: GLenum;
	const READ_FRAMEBUFFER_BINDING: GLenum;
	const RED: GLenum;
	const RED_BITS: GLenum;
	const RED_INTEGER: GLenum;
	const RENDERBUFFER: GLenum;
	const RENDERBUFFER_ALPHA_SIZE: GLenum;
	const RENDERBUFFER_BINDING: GLenum;
	const RENDERBUFFER_BLUE_SIZE: GLenum;
	const RENDERBUFFER_DEPTH_SIZE: GLenum;
	const RENDERBUFFER_GREEN_SIZE: GLenum;
	const RENDERBUFFER_HEIGHT: GLenum;
	const RENDERBUFFER_INTERNAL_FORMAT: GLenum;
	const RENDERBUFFER_RED_SIZE: GLenum;
	const RENDERBUFFER_SAMPLES: GLenum;
	const RENDERBUFFER_STENCIL_SIZE: GLenum;
	const RENDERBUFFER_WIDTH: GLenum;
	const RENDERER: GLenum;
	const REPEAT: GLenum;
	const REPLACE: GLenum;
	const RG16F: GLenum;
	const RG16I: GLenum;
	const RG16UI: GLenum;
	const RG32F: GLenum;
	const RG32I: GLenum;
	const RG32UI: GLenum;
	const RG8: GLenum;
	const RG8I: GLenum;
	const RG8UI: GLenum;
	const RG8_SNORM: GLenum;
	const RG: GLenum;
	const RGB10_A2: GLenum;
	const RGB10_A2UI: GLenum;
	const RGB16F: GLenum;
	const RGB16I: GLenum;
	const RGB16UI: GLenum;
	const RGB32F: GLenum;
	const RGB32I: GLenum;
	const RGB32UI: GLenum;
	const RGB565: GLenum;
	const RGB5_A1: GLenum;
	const RGB8: GLenum;
	const RGB8I: GLenum;
	const RGB8UI: GLenum;
	const RGB8_SNORM: GLenum;
	const RGB9_E5: GLenum;
	const RGB: GLenum;
	const RGBA16F: GLenum;
	const RGBA16I: GLenum;
	const RGBA16UI: GLenum;
	const RGBA32F: GLenum;
	const RGBA32I: GLenum;
	const RGBA32UI: GLenum;
	const RGBA4: GLenum;
	const RGBA8: GLenum;
	const RGBA8I: GLenum;
	const RGBA8UI: GLenum;
	const RGBA8_SNORM: GLenum;
	const RGBA: GLenum;
	const RGBA_INTEGER: GLenum;
	const RGB_INTEGER: GLenum;
	const RG_INTEGER: GLenum;
	const SAMPLER_2D: GLenum;
	const SAMPLER_2D_ARRAY: GLenum;
	const SAMPLER_2D_ARRAY_SHADOW: GLenum;
	const SAMPLER_2D_SHADOW: GLenum;
	const SAMPLER_3D: GLenum;
	const SAMPLER_BINDING: GLenum;
	const SAMPLER_CUBE: GLenum;
	const SAMPLER_CUBE_SHADOW: GLenum;
	const SAMPLES: GLenum;
	const SAMPLE_ALPHA_TO_COVERAGE: GLenum;
	const SAMPLE_BUFFERS: GLenum;
	const SAMPLE_COVERAGE: GLenum;
	const SAMPLE_COVERAGE_INVERT: GLenum;
	const SAMPLE_COVERAGE_VALUE: GLenum;
	const SCISSOR_BOX: GLenum;
	const SCISSOR_TEST: GLenum;
	const SEPARATE_ATTRIBS: GLenum;
	const SHADER_TYPE: GLenum;
	const SHADING_LANGUAGE_VERSION: GLenum;
	const SHORT: GLenum;
	const SIGNALED: GLenum;
	const SIGNED_NORMALIZED: GLenum;
	const SRC_ALPHA: GLenum;
	const SRC_ALPHA_SATURATE: GLenum;
	const SRC_COLOR: GLenum;
	const SRGB8: GLenum;
	const SRGB8_ALPHA8: GLenum;
	const SRGB: GLenum;
	const STATIC_COPY: GLenum;
	const STATIC_DRAW: GLenum;
	const STATIC_READ: GLenum;
	const STENCIL: GLenum;
	const STENCIL_ATTACHMENT: GLenum;
	const STENCIL_BACK_FAIL: GLenum;
	const STENCIL_BACK_FUNC: GLenum;
	const STENCIL_BACK_PASS_DEPTH_FAIL: GLenum;
	const STENCIL_BACK_PASS_DEPTH_PASS: GLenum;
	const STENCIL_BACK_REF: GLenum;
	const STENCIL_BACK_VALUE_MASK: GLenum;
	const STENCIL_BACK_WRITEMASK: GLenum;
	const STENCIL_BITS: GLenum;
	const STENCIL_BUFFER_BIT: GLenum;
	const STENCIL_CLEAR_VALUE: GLenum;
	const STENCIL_FAIL: GLenum;
	const STENCIL_FUNC: GLenum;
	const STENCIL_INDEX8: GLenum;
	const STENCIL_PASS_DEPTH_FAIL: GLenum;
	const STENCIL_PASS_DEPTH_PASS: GLenum;
	const STENCIL_REF: GLenum;
	const STENCIL_TEST: GLenum;
	const STENCIL_VALUE_MASK: GLenum;
	const STENCIL_WRITEMASK: GLenum;
	const STREAM_COPY: GLenum;
	const STREAM_DRAW: GLenum;
	const STREAM_READ: GLenum;
	const SUBPIXEL_BITS: GLenum;
	const SYNC_CONDITION: GLenum;
	const SYNC_FENCE: GLenum;
	const SYNC_FLAGS: GLenum;
	const SYNC_FLUSH_COMMANDS_BIT: GLenum;
	const SYNC_GPU_COMMANDS_COMPLETE: GLenum;
	const SYNC_STATUS: GLenum;
	const TEXTURE0: GLenum;
	const TEXTURE10: GLenum;
	const TEXTURE11: GLenum;
	const TEXTURE12: GLenum;
	const TEXTURE13: GLenum;
	const TEXTURE14: GLenum;
	const TEXTURE15: GLenum;
	const TEXTURE16: GLenum;
	const TEXTURE17: GLenum;
	const TEXTURE18: GLenum;
	const TEXTURE19: GLenum;
	const TEXTURE1: GLenum;
	const TEXTURE20: GLenum;
	const TEXTURE21: GLenum;
	const TEXTURE22: GLenum;
	const TEXTURE23: GLenum;
	const TEXTURE24: GLenum;
	const TEXTURE25: GLenum;
	const TEXTURE26: GLenum;
	const TEXTURE27: GLenum;
	const TEXTURE28: GLenum;
	const TEXTURE29: GLenum;
	const TEXTURE2: GLenum;
	const TEXTURE30: GLenum;
	const TEXTURE31: GLenum;
	const TEXTURE3: GLenum;
	const TEXTURE4: GLenum;
	const TEXTURE5: GLenum;
	const TEXTURE6: GLenum;
	const TEXTURE7: GLenum;
	const TEXTURE8: GLenum;
	const TEXTURE9: GLenum;
	const TEXTURE: GLenum;
	const TEXTURE_2D: GLenum;
	const TEXTURE_2D_ARRAY: GLenum;
	const TEXTURE_3D: GLenum;
	const TEXTURE_BASE_LEVEL: GLenum;
	const TEXTURE_BINDING_2D: GLenum;
	const TEXTURE_BINDING_2D_ARRAY: GLenum;
	const TEXTURE_BINDING_3D: GLenum;
	const TEXTURE_BINDING_CUBE_MAP: GLenum;
	const TEXTURE_COMPARE_FUNC: GLenum;
	const TEXTURE_COMPARE_MODE: GLenum;
	const TEXTURE_CUBE_MAP: GLenum;
	const TEXTURE_CUBE_MAP_NEGATIVE_X: GLenum;
	const TEXTURE_CUBE_MAP_NEGATIVE_Y: GLenum;
	const TEXTURE_CUBE_MAP_NEGATIVE_Z: GLenum;
	const TEXTURE_CUBE_MAP_POSITIVE_X: GLenum;
	const TEXTURE_CUBE_MAP_POSITIVE_Y: GLenum;
	const TEXTURE_CUBE_MAP_POSITIVE_Z: GLenum;
	const TEXTURE_IMMUTABLE_FORMAT: GLenum;
	const TEXTURE_IMMUTABLE_LEVELS: GLenum;
	const TEXTURE_MAG_FILTER: GLenum;
	const TEXTURE_MAX_LEVEL: GLenum;
	const TEXTURE_MAX_LOD: GLenum;
	const TEXTURE_MIN_FILTER: GLenum;
	const TEXTURE_MIN_LOD: GLenum;
	const TEXTURE_WRAP_R: GLenum;
	const TEXTURE_WRAP_S: GLenum;
	const TEXTURE_WRAP_T: GLenum;
	const TIMEOUT_EXPIRED: GLenum;
	const TIMEOUT_IGNORED: GLint64;
	const TRANSFORM_FEEDBACK: GLenum;
	const TRANSFORM_FEEDBACK_ACTIVE: GLenum;
	const TRANSFORM_FEEDBACK_BINDING: GLenum;
	const TRANSFORM_FEEDBACK_BUFFER: GLenum;
	const TRANSFORM_FEEDBACK_BUFFER_BINDING: GLenum;
	const TRANSFORM_FEEDBACK_BUFFER_MODE: GLenum;
	const TRANSFORM_FEEDBACK_BUFFER_SIZE: GLenum;
	const TRANSFORM_FEEDBACK_BUFFER_START: GLenum;
	const TRANSFORM_FEEDBACK_PAUSED: GLenum;
	const TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN: GLenum;
	const TRANSFORM_FEEDBACK_VARYINGS: GLenum;
	const TRIANGLES: GLenum;
	const TRIANGLE_FAN: GLenum;
	const TRIANGLE_STRIP: GLenum;
	const UNIFORM_ARRAY_STRIDE: GLenum;
	const UNIFORM_BLOCK_ACTIVE_UNIFORMS: GLenum;
	const UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES: GLenum;
	const UNIFORM_BLOCK_BINDING: GLenum;
	const UNIFORM_BLOCK_DATA_SIZE: GLenum;
	const UNIFORM_BLOCK_INDEX: GLenum;
	const UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER: GLenum;
	const UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER: GLenum;
	const UNIFORM_BUFFER: GLenum;
	const UNIFORM_BUFFER_BINDING: GLenum;
	const UNIFORM_BUFFER_OFFSET_ALIGNMENT: GLenum;
	const UNIFORM_BUFFER_SIZE: GLenum;
	const UNIFORM_BUFFER_START: GLenum;
	const UNIFORM_IS_ROW_MAJOR: GLenum;
	const UNIFORM_MATRIX_STRIDE: GLenum;
	const UNIFORM_OFFSET: GLenum;
	const UNIFORM_SIZE: GLenum;
	const UNIFORM_TYPE: GLenum;
	const UNPACK_ALIGNMENT: GLenum;
	const UNPACK_COLORSPACE_CONVERSION_WEBGL: GLenum;
	const UNPACK_FLIP_Y_WEBGL: GLenum;
	const UNPACK_IMAGE_HEIGHT: GLenum;
	const UNPACK_PREMULTIPLY_ALPHA_WEBGL: GLenum;
	const UNPACK_ROW_LENGTH: GLenum;
	const UNPACK_SKIP_IMAGES: GLenum;
	const UNPACK_SKIP_PIXELS: GLenum;
	const UNPACK_SKIP_ROWS: GLenum;
	const UNSIGNALED: GLenum;
	const UNSIGNED_BYTE: GLenum;
	const UNSIGNED_INT: GLenum;
	const UNSIGNED_INT_10F_11F_11F_REV: GLenum;
	const UNSIGNED_INT_24_8: GLenum;
	const UNSIGNED_INT_2_10_10_10_REV: GLenum;
	const UNSIGNED_INT_5_9_9_9_REV: GLenum;
	const UNSIGNED_INT_SAMPLER_2D: GLenum;
	const UNSIGNED_INT_SAMPLER_2D_ARRAY: GLenum;
	const UNSIGNED_INT_SAMPLER_3D: GLenum;
	const UNSIGNED_INT_SAMPLER_CUBE: GLenum;
	const UNSIGNED_INT_VEC2: GLenum;
	const UNSIGNED_INT_VEC3: GLenum;
	const UNSIGNED_INT_VEC4: GLenum;
	const UNSIGNED_NORMALIZED: GLenum;
	const UNSIGNED_SHORT: GLenum;
	const UNSIGNED_SHORT_4_4_4_4: GLenum;
	const UNSIGNED_SHORT_5_5_5_1: GLenum;
	const UNSIGNED_SHORT_5_6_5: GLenum;
	const VALIDATE_STATUS: GLenum;
	const VENDOR: GLenum;
	const VERSION: GLenum;
	const VERTEX_ARRAY_BINDING: GLenum;
	const VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: GLenum;
	const VERTEX_ATTRIB_ARRAY_DIVISOR: GLenum;
	const VERTEX_ATTRIB_ARRAY_ENABLED: GLenum;
	const VERTEX_ATTRIB_ARRAY_INTEGER: GLenum;
	const VERTEX_ATTRIB_ARRAY_NORMALIZED: GLenum;
	const VERTEX_ATTRIB_ARRAY_POINTER: GLenum;
	const VERTEX_ATTRIB_ARRAY_SIZE: GLenum;
	const VERTEX_ATTRIB_ARRAY_STRIDE: GLenum;
	const VERTEX_ATTRIB_ARRAY_TYPE: GLenum;
	const VERTEX_SHADER: GLenum;
	const VIEWPORT: GLenum;
	const WAIT_FAILED: GLenum;
	const ZERO: GLenum;
	const canvas: HTMLCanvasElement;
	const drawingBufferHeight: GLsizei;
	const drawingBufferWidth: GLsizei;
	function activeTexture(texture: GLenum): void;
	function attachShader(program: WebGLProgram, shader: WebGLShader): void;
	function beginQuery(target: GLenum, query: WebGLQuery): void;
	function beginTransformFeedback(primitiveMode: GLenum): void;
	function bindAttribLocation(program: WebGLProgram, index: GLuint, name: string): void;
	function bindBuffer(target: GLenum, buffer: WebGLBuffer | null): void;
	function bindBufferBase(target: GLenum, index: GLuint, buffer: WebGLBuffer | null): void;
	function bindBufferRange(target: GLenum, index: GLuint, buffer: WebGLBuffer | null, offset: GLintptr, size: GLsizeiptr): void;
	function bindFramebuffer(target: GLenum, framebuffer: WebGLFramebuffer | null): void;
	function bindRenderbuffer(target: GLenum, renderbuffer: WebGLRenderbuffer | null): void;
	function bindSampler(unit: GLuint, sampler: WebGLSampler | null): void;
	function bindTexture(target: GLenum, texture: WebGLTexture | null): void;
	function bindTransformFeedback(target: GLenum, tf: WebGLTransformFeedback | null): void;
	function bindVertexArray(array: WebGLVertexArrayObject | null): void;
	function blendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;
	function blendEquation(mode: GLenum): void;
	function blendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum): void;
	function blendFunc(sfactor: GLenum, dfactor: GLenum): void;
	function blendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum): void;
	function blitFramebuffer(srcX0: GLint, srcY0: GLint, srcX1: GLint, srcY1: GLint, dstX0: GLint, dstY0: GLint, dstX1: GLint, dstY1: GLint, mask: GLbitfield, filter: GLenum): void;
	function bufferData(target: GLenum, size: GLsizeiptr, usage: GLenum): void;
	function bufferData(target: GLenum, srcData: ArrayBufferView, usage: GLenum, srcOffset: GLuint, length?: GLuint): void;
	function bufferData(target: GLenum, srcData: BufferSource | null, usage: GLenum): void;
	function bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: ArrayBufferView, srcOffset: GLuint, length?: GLuint): void;
	function bufferSubData(target: GLenum, dstByteOffset: GLintptr, srcData: BufferSource): void;
	function checkFramebufferStatus(target: GLenum): GLenum;
	function clear(mask: GLbitfield): void;
	function clearBufferfi(buffer: GLenum, drawbuffer: GLint, depth: GLfloat, stencil: GLint): void;
	function clearBufferfv(buffer: GLenum, drawbuffer: GLint, values: Float32List, srcOffset?: GLuint): void;
	function clearBufferiv(buffer: GLenum, drawbuffer: GLint, values: Int32List, srcOffset?: GLuint): void;
	function clearBufferuiv(buffer: GLenum, drawbuffer: GLint, values: Uint32List, srcOffset?: GLuint): void;
	function clearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf): void;
	function clearDepth(depth: GLclampf): void;
	function clearStencil(s: GLint): void;
	function clientWaitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLuint64): GLenum;
	function colorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean): void;
	function compileShader(shader: WebGLShader): void;
	function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;
	function compressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;
	function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, offset: GLintptr): void;
	function compressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;
	function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;
	function compressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;
	function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, offset: GLintptr): void;
	function compressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, srcData: ArrayBufferView, srcOffset?: GLuint, srcLengthOverride?: GLuint): void;
	function copyBufferSubData(readTarget: GLenum, writeTarget: GLenum, readOffset: GLintptr, writeOffset: GLintptr, size: GLsizeiptr): void;
	function copyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint): void;
	function copyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
	function copyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
	function createBuffer(): WebGLBuffer | null;
	function createFramebuffer(): WebGLFramebuffer | null;
	function createProgram(): WebGLProgram | null;
	function createQuery(): WebGLQuery | null;
	function createRenderbuffer(): WebGLRenderbuffer | null;
	function createSampler(): WebGLSampler | null;
	function createShader(type: GLenum): WebGLShader | null;
	function createTexture(): WebGLTexture | null;
	function createTransformFeedback(): WebGLTransformFeedback | null;
	function createVertexArray(): WebGLVertexArrayObject | null;
	function cullFace(mode: GLenum): void;
	function deleteBuffer(buffer: WebGLBuffer | null): void;
	function deleteFramebuffer(framebuffer: WebGLFramebuffer | null): void;
	function deleteProgram(program: WebGLProgram | null): void;
	function deleteQuery(query: WebGLQuery | null): void;
	function deleteRenderbuffer(renderbuffer: WebGLRenderbuffer | null): void;
	function deleteSampler(sampler: WebGLSampler | null): void;
	function deleteShader(shader: WebGLShader | null): void;
	function deleteSync(sync: WebGLSync | null): void;
	function deleteTexture(texture: WebGLTexture | null): void;
	function deleteTransformFeedback(tf: WebGLTransformFeedback | null): void;
	function deleteVertexArray(vertexArray: WebGLVertexArrayObject | null): void;
	function depthFunc(func: GLenum): void;
	function depthMask(flag: GLboolean): void;
	function depthRange(zNear: GLclampf, zFar: GLclampf): void;
	function detachShader(program: WebGLProgram, shader: WebGLShader): void;
	function disable(cap: GLenum): void;
	function disableVertexAttribArray(index: GLuint): void;
	function drawArrays(mode: GLenum, first: GLint, count: GLsizei): void;
	function drawArraysInstanced(mode: GLenum, first: GLint, count: GLsizei, instanceCount: GLsizei): void;
	function drawBuffers(buffers: GLenum[]): void;
	function drawElements(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr): void;
	function drawElementsInstanced(mode: GLenum, count: GLsizei, type: GLenum, offset: GLintptr, instanceCount: GLsizei): void;
	function drawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, type: GLenum, offset: GLintptr): void;
	function enable(cap: GLenum): void;
	function enableVertexAttribArray(index: GLuint): void;
	function endQuery(target: GLenum): void;
	function endTransformFeedback(): void;
	function fenceSync(condition: GLenum, flags: GLbitfield): WebGLSync | null;
	function finish(): void;
	function flush(): void;
	function framebufferRenderbuffer(target: GLenum, attachment: GLenum, renderbuffertarget: GLenum, renderbuffer: WebGLRenderbuffer | null): void;
	function framebufferTexture2D(target: GLenum, attachment: GLenum, textarget: GLenum, texture: WebGLTexture | null, level: GLint): void;
	function framebufferTextureLayer(target: GLenum, attachment: GLenum, texture: WebGLTexture | null, level: GLint, layer: GLint): void;
	function frontFace(mode: GLenum): void;
	function generateMipmap(target: GLenum): void;
	function getActiveAttrib(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
	function getActiveUniform(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
	function getActiveUniformBlockName(program: WebGLProgram, uniformBlockIndex: GLuint): string | null;
	function getActiveUniformBlockParameter(program: WebGLProgram, uniformBlockIndex: GLuint, pname: GLenum): any;
	function getActiveUniforms(program: WebGLProgram, uniformIndices: GLuint[], pname: GLenum): any;
	function getAttachedShaders(program: WebGLProgram): WebGLShader[] | null;
	function getAttribLocation(program: WebGLProgram, name: string): GLint;
	function getBufferParameter(target: GLenum, pname: GLenum): any;
	function getBufferSubData(target: GLenum, srcByteOffset: GLintptr, dstBuffer: ArrayBufferView, dstOffset?: GLuint, length?: GLuint): void;
	function getContextAttributes(): WebGLContextAttributes | null;
	function getError(): GLenum;
	function getExtension(extensionName: "ANGLE_instanced_arrays"): ANGLE_instanced_arrays | null;
	function getExtension(extensionName: "EXT_blend_minmax"): EXT_blend_minmax | null;
	function getExtension(extensionName: "EXT_color_buffer_float"): EXT_color_buffer_float | null;
	function getExtension(extensionName: "EXT_color_buffer_half_float"): EXT_color_buffer_half_float | null;
	function getExtension(extensionName: "EXT_float_blend"): EXT_float_blend | null;
	function getExtension(extensionName: "EXT_frag_depth"): EXT_frag_depth | null;
	function getExtension(extensionName: "EXT_sRGB"): EXT_sRGB | null;
	function getExtension(extensionName: "EXT_shader_texture_lod"): EXT_shader_texture_lod | null;
	function getExtension(extensionName: "EXT_texture_filter_anisotropic"): EXT_texture_filter_anisotropic | null;
	function getExtension(extensionName: "KHR_parallel_shader_compile"): KHR_parallel_shader_compile | null;
	function getExtension(extensionName: "OES_element_index_uint"): OES_element_index_uint | null;
	function getExtension(extensionName: "OES_standard_derivatives"): OES_standard_derivatives | null;
	function getExtension(extensionName: "OES_texture_float"): OES_texture_float | null;
	function getExtension(extensionName: "OES_texture_float_linear"): OES_texture_float_linear | null;
	function getExtension(extensionName: "OES_texture_half_float"): OES_texture_half_float | null;
	function getExtension(extensionName: "OES_texture_half_float_linear"): OES_texture_half_float_linear | null;
	function getExtension(extensionName: "OES_vertex_array_object"): OES_vertex_array_object | null;
	function getExtension(extensionName: "OVR_multiview2"): OVR_multiview2 | null;
	function getExtension(extensionName: "WEBGL_color_buffer_float"): WEBGL_color_buffer_float | null;
	function getExtension(extensionName: "WEBGL_compressed_texture_astc"): WEBGL_compressed_texture_astc | null;
	function getExtension(extensionName: "WEBGL_compressed_texture_etc"): WEBGL_compressed_texture_etc | null;
	function getExtension(extensionName: "WEBGL_compressed_texture_etc1"): WEBGL_compressed_texture_etc1 | null;
	function getExtension(extensionName: "WEBGL_compressed_texture_pvrtc"): WEBGL_compressed_texture_pvrtc | null;
	function getExtension(extensionName: "WEBGL_compressed_texture_s3tc"): WEBGL_compressed_texture_s3tc | null;
	function getExtension(extensionName: "WEBGL_compressed_texture_s3tc_srgb"): WEBGL_compressed_texture_s3tc_srgb | null;
	function getExtension(extensionName: "WEBGL_debug_renderer_info"): WEBGL_debug_renderer_info | null;
	function getExtension(extensionName: "WEBGL_debug_shaders"): WEBGL_debug_shaders | null;
	function getExtension(extensionName: "WEBGL_depth_texture"): WEBGL_depth_texture | null;
	function getExtension(extensionName: "WEBGL_draw_buffers"): WEBGL_draw_buffers | null;
	function getExtension(extensionName: "WEBGL_lose_context"): WEBGL_lose_context | null;
	function getExtension(name: string): any;
	function getFragDataLocation(program: WebGLProgram, name: string): GLint;
	function getFramebufferAttachmentParameter(target: GLenum, attachment: GLenum, pname: GLenum): any;
	function getIndexedParameter(target: GLenum, index: GLuint): any;
	function getInternalformatParameter(target: GLenum, internalformat: GLenum, pname: GLenum): any;
	function getParameter(pname: GLenum): any;
	function getProgramInfoLog(program: WebGLProgram): string | null;
	function getProgramParameter(program: WebGLProgram, pname: GLenum): any;
	function getQuery(target: GLenum, pname: GLenum): WebGLQuery | null;
	function getQueryParameter(query: WebGLQuery, pname: GLenum): any;
	function getRenderbufferParameter(target: GLenum, pname: GLenum): any;
	function getSamplerParameter(sampler: WebGLSampler, pname: GLenum): any;
	function getShaderInfoLog(shader: WebGLShader): string | null;
	function getShaderParameter(shader: WebGLShader, pname: GLenum): any;
	function getShaderPrecisionFormat(shadertype: GLenum, precisiontype: GLenum): WebGLShaderPrecisionFormat | null;
	function getShaderSource(shader: WebGLShader): string | null;
	function getSupportedExtensions(): string[] | null;
	function getSyncParameter(sync: WebGLSync, pname: GLenum): any;
	function getTexParameter(target: GLenum, pname: GLenum): any;
	function getTransformFeedbackVarying(program: WebGLProgram, index: GLuint): WebGLActiveInfo | null;
	function getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;
	function getUniformBlockIndex(program: WebGLProgram, uniformBlockName: string): GLuint;
	function getUniformIndices(program: WebGLProgram, uniformNames: string[]): GLuint[] | null;
	function getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation | null;
	function getVertexAttrib(index: GLuint, pname: GLenum): any;
	function getVertexAttribOffset(index: GLuint, pname: GLenum): GLintptr;
	function hint(target: GLenum, mode: GLenum): void;
	function invalidateFramebuffer(target: GLenum, attachments: GLenum[]): void;
	function invalidateSubFramebuffer(target: GLenum, attachments: GLenum[], x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
	function isBuffer(buffer: WebGLBuffer | null): GLboolean;
	function isContextLost(): boolean;
	function isEnabled(cap: GLenum): GLboolean;
	function isFramebuffer(framebuffer: WebGLFramebuffer | null): GLboolean;
	function isProgram(program: WebGLProgram | null): GLboolean;
	function isQuery(query: WebGLQuery | null): GLboolean;
	function isRenderbuffer(renderbuffer: WebGLRenderbuffer | null): GLboolean;
	function isSampler(sampler: WebGLSampler | null): GLboolean;
	function isShader(shader: WebGLShader | null): GLboolean;
	function isSync(sync: WebGLSync | null): GLboolean;
	function isTexture(texture: WebGLTexture | null): GLboolean;
	function isTransformFeedback(tf: WebGLTransformFeedback | null): GLboolean;
	function isVertexArray(vertexArray: WebGLVertexArrayObject | null): GLboolean;
	function lineWidth(width: GLfloat): void;
	function linkProgram(program: WebGLProgram): void;
	function pauseTransformFeedback(): void;
	function pixelStorei(pname: GLenum, param: GLint | GLboolean): void;
	function polygonOffset(factor: GLfloat, units: GLfloat): void;
	function readBuffer(src: GLenum): void;
	function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView | null): void;
	function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, dstData: ArrayBufferView, dstOffset: GLuint): void;
	function readPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, offset: GLintptr): void;
	function renderbufferStorage(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
	function renderbufferStorageMultisample(target: GLenum, samples: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
	function resumeTransformFeedback(): void;
	function sampleCoverage(value: GLclampf, invert: GLboolean): void;
	function samplerParameterf(sampler: WebGLSampler, pname: GLenum, param: GLfloat): void;
	function samplerParameteri(sampler: WebGLSampler, pname: GLenum, param: GLint): void;
	function scissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
	function shaderSource(shader: WebGLShader, source: string): void;
	function stencilFunc(func: GLenum, ref: GLint, mask: GLuint): void;
	function stencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint): void;
	function stencilMask(mask: GLuint): void;
	function stencilMaskSeparate(face: GLenum, mask: GLuint): void;
	function stencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum): void;
	function stencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum): void;
	function texImage2D(target: GLenum, level: GLint, internalformat: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
	function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
	function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;
	function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
	function texImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;
	function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
	function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
	function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView | null): void;
	function texImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;
	function texParameterf(target: GLenum, pname: GLenum, param: GLfloat): void;
	function texParameteri(target: GLenum, pname: GLenum, param: GLint): void;
	function texStorage2D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei): void;
	function texStorage3D(target: GLenum, levels: GLsizei, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei): void;
	function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, format: GLenum, type: GLenum, source: TexImageSource): void;
	function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
	function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, pixels: ArrayBufferView | null): void;
	function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;
	function texSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView, srcOffset: GLuint): void;
	function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, pboOffset: GLintptr): void;
	function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, source: TexImageSource): void;
	function texSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, type: GLenum, srcData: ArrayBufferView | null, srcOffset?: GLuint): void;
	function transformFeedbackVaryings(program: WebGLProgram, varyings: string[], bufferMode: GLenum): void;
	function uniform1f(location: WebGLUniformLocation | null, x: GLfloat): void;
	function uniform1fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform1i(location: WebGLUniformLocation | null, x: GLint): void;
	function uniform1iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform1ui(location: WebGLUniformLocation | null, v0: GLuint): void;
	function uniform1uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform2f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat): void;
	function uniform2fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform2i(location: WebGLUniformLocation | null, x: GLint, y: GLint): void;
	function uniform2iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform2ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint): void;
	function uniform2uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform3f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat): void;
	function uniform3fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform3i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint): void;
	function uniform3iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform3ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint): void;
	function uniform3uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform4f(location: WebGLUniformLocation | null, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;
	function uniform4fv(location: WebGLUniformLocation | null, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform4i(location: WebGLUniformLocation | null, x: GLint, y: GLint, z: GLint, w: GLint): void;
	function uniform4iv(location: WebGLUniformLocation | null, data: Int32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniform4ui(location: WebGLUniformLocation | null, v0: GLuint, v1: GLuint, v2: GLuint, v3: GLuint): void;
	function uniform4uiv(location: WebGLUniformLocation | null, data: Uint32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformBlockBinding(program: WebGLProgram, uniformBlockIndex: GLuint, uniformBlockBinding: GLuint): void;
	function uniformMatrix2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix2x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix2x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix3x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix3x4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix4fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix4x2fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function uniformMatrix4x3fv(location: WebGLUniformLocation | null, transpose: GLboolean, data: Float32List, srcOffset?: GLuint, srcLength?: GLuint): void;
	function useProgram(program: WebGLProgram | null): void;
	function validateProgram(program: WebGLProgram): void;
	function vertexAttrib1f(index: GLuint, x: GLfloat): void;
	function vertexAttrib1fv(index: GLuint, values: Float32List): void;
	function vertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat): void;
	function vertexAttrib2fv(index: GLuint, values: Float32List): void;
	function vertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat): void;
	function vertexAttrib3fv(index: GLuint, values: Float32List): void;
	function vertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat): void;
	function vertexAttrib4fv(index: GLuint, values: Float32List): void;
	function vertexAttribDivisor(index: GLuint, divisor: GLuint): void;
	function vertexAttribI4i(index: GLuint, x: GLint, y: GLint, z: GLint, w: GLint): void;
	function vertexAttribI4iv(index: GLuint, values: Int32List): void;
	function vertexAttribI4ui(index: GLuint, x: GLuint, y: GLuint, z: GLuint, w: GLuint): void;
	function vertexAttribI4uiv(index: GLuint, values: Uint32List): void;
	function vertexAttribIPointer(index: GLuint, size: GLint, type: GLenum, stride: GLsizei, offset: GLintptr): void;
	function vertexAttribPointer(index: GLuint, size: GLint, type: GLenum, normalized: GLboolean, stride: GLsizei, offset: GLintptr): void;
	function viewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei): void;
	function waitSync(sync: WebGLSync, flags: GLbitfield, timeout: GLint64): void;
}
